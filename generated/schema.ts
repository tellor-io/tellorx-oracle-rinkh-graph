// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class NewReportEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("_nonce", Value.fromBigInt(BigInt.zero()));
    this.set("_queryData", Value.fromBytes(Bytes.empty()));
    this.set("_queryId", Value.fromBytes(Bytes.empty()));
    this.set("_reward", Value.fromBigInt(BigInt.zero()));
    this.set("_time", Value.fromBigInt(BigInt.zero()));
    this.set("_value", Value.fromBytes(Bytes.empty()));
    this.set("_reporter", Value.fromBytes(Bytes.empty()));
    this.set("txnHash", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NewReportEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NewReportEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NewReportEntity", id.toString(), this);
    }
  }

  static load(id: string): NewReportEntity | null {
    return changetype<NewReportEntity | null>(store.get("NewReportEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _nonce(): BigInt {
    let value = this.get("_nonce");
    return value!.toBigInt();
  }

  set _nonce(value: BigInt) {
    this.set("_nonce", Value.fromBigInt(value));
  }

  get _queryData(): Bytes {
    let value = this.get("_queryData");
    return value!.toBytes();
  }

  set _queryData(value: Bytes) {
    this.set("_queryData", Value.fromBytes(value));
  }

  get _queryId(): Bytes {
    let value = this.get("_queryId");
    return value!.toBytes();
  }

  set _queryId(value: Bytes) {
    this.set("_queryId", Value.fromBytes(value));
  }

  get _reward(): BigInt {
    let value = this.get("_reward");
    return value!.toBigInt();
  }

  set _reward(value: BigInt) {
    this.set("_reward", Value.fromBigInt(value));
  }

  get _time(): BigInt {
    let value = this.get("_time");
    return value!.toBigInt();
  }

  set _time(value: BigInt) {
    this.set("_time", Value.fromBigInt(value));
  }

  get _value(): Bytes {
    let value = this.get("_value");
    return value!.toBytes();
  }

  set _value(value: Bytes) {
    this.set("_value", Value.fromBytes(value));
  }

  get _reporter(): Bytes {
    let value = this.get("_reporter");
    return value!.toBytes();
  }

  set _reporter(value: Bytes) {
    this.set("_reporter", Value.fromBytes(value));
  }

  get txnHash(): Bytes {
    let value = this.get("txnHash");
    return value!.toBytes();
  }

  set txnHash(value: Bytes) {
    this.set("txnHash", Value.fromBytes(value));
  }
}
